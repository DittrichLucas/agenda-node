{"version":3,"file":"InjectConnection.js","sourceRoot":"","sources":["../../../src/decorators/InjectConnection.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,SAAS,CAAC;AAC5C,OAAO,EAAE,SAAS,EAAiB,MAAM,QAAQ,CAAC;AAElD;;GAEG;AACH,MAAM,UAAU,gBAAgB,CAAC,cAAkC;IAAlC,+BAAA,EAAA,0BAAkC;IACjE,OAAO,UAAU,MAAyB,EAAE,YAAoB,EAAE,KAAc;QAC9E,SAAS,CAAC,eAAe,CAAC;YACxB,MAAM,EAAE,MAAgC;YACxC,KAAK,OAAA;YACL,YAAY,cAAA;YACZ,KAAK,EAAE;gBACL,IAAM,iBAAiB,GAAG,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;gBAC3D,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,cAAc,CAAC;oBACxC,MAAM,IAAI,KAAK,CACb,6BAA0B,cAAc,qCAAiC;wBACvE,qGAAqG;wBACrG,mFAAmF,CACtF,CAAC;gBAEJ,OAAO,iBAAiB,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YAC/C,CAAC;SACF,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import { ConnectionManager } from 'typeorm';\nimport { Container, Constructable } from 'typedi';\n\n/**\n * Allows to inject an Connection using typedi's Container.\n */\nexport function InjectConnection(connectionName: string = 'default'): Function {\n  return function (object: Object | Function, propertyName: string, index?: number) {\n    Container.registerHandler({\n      object: object as Constructable<unknown>,\n      index,\n      propertyName,\n      value: () => {\n        const connectionManager = Container.get(ConnectionManager);\n        if (!connectionManager.has(connectionName))\n          throw new Error(\n            `Cannot get connection \"${connectionName}\" from the connection manager. ` +\n              `Make sure you have created such connection. Also make sure you have called useContainer(Container) ` +\n              `in your application before you established a connection and importing any entity.`\n          );\n\n        return connectionManager.get(connectionName);\n      },\n    });\n  };\n}\n"]}