{"version":3,"file":"EntityTypeMissingError.js","sourceRoot":"","sources":["../../../src/errors/EntityTypeMissingError.ts"],"names":[],"mappings":"AAAA,MAAM,OAAO,sBAAuB,SAAQ,KAAK;IAC/C,YAAY,MAAc,EAAE,YAAoB,EAAE,KAAc;QAC9D,KAAK,CACH,kEAAkE,GAAG,KAAK,KAAK,SAAS;YACtF,CAAC,CAAC,UAAU,YAAY,cAAc,KAAM,GAAG,CAAC,kBAAkB,MAAM,CAAC,WAAW,CAAC,IAAI,UAAU;YACnG,CAAC,CAAC,mBAAmB,YAAY,QAAQ,MAAM,CAAC,WAAW,CAAC,IAAI,UAAU;gBACtE,+DAA+D;gBAC/D,wEAAwE;gBACxE,qEAAqE,CAC5E,CAAC;QAEF,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,sBAAsB,CAAC,SAAS,CAAC,CAAC;IAChE,CAAC;CACF","sourcesContent":["export class EntityTypeMissingError extends Error {\n  constructor(object: Object, propertyName: string, index?: number) {\n    super(\n      `Missing \"entityType\" parameter of \"@InjectRepository\" decorator ` + index !== undefined\n        ? `for a \"${propertyName}\" method's ${index! + 1}. parameter of ${object.constructor.name} class. `\n        : `for a property \"${propertyName}\" of ${object.constructor.name} class. ` +\n            `For injecting Repository, MongoRepository or TreeRepository, ` +\n            `you have to specify the entity type due to TS reflection limitation - ` +\n            `\"entityType\" parameter can be ommited only for custom repositories.`\n    );\n\n    Object.setPrototypeOf(this, EntityTypeMissingError.prototype);\n  }\n}\n"]}